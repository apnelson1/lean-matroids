I'm interested in formalizing the combinatorial theory of matroids. After working on this / learning Lean for the last week or so, I am running into some basic issues with definitions that I don't know the solution
to. This (somewhat long) post is an appeal for help. I will try to give the minimum amount of information to indicate what my problems are.

There are many equivalent definitions of a matroid, but the one I am interested in is the following: a matroid is a pair (E,r), where E is a finite 'ground' set, and r is a function assigning a nonegative integer 'rank' to each subset X of E, so that three axioms are satisfied:

R1 :  ∀ X ⊆ E, r(X) ≤ |X|
R2 :  ∀ X ⊆ Y ⊆ E,  r(X) ≤ r (Y)
R3 :  ∀ X ⊆ Y ⊆ E,  r (X ∪ Y) + r (X ∩ Y)  ≤ r(X) + r(Y) .

The exact nature of the second and third axioms is not particularly important. It is somewhat important that cardinality appears in the first one though; this is one of the many reasons that matroids need to be finite, which is seemingly the source of a few of the problem I'm encountering.

To give an idea of the kind of statements about matroids I would like to prove, I ask that you bear with me while I give three other definitions and one lemma statement.

Given a set A ⊆ E, one can 'remove' A from M in two different ways
to obtain matroids with ground set E \ A.  the 'deletion' M \ A is just the matroid obtained from M by restricting the rank function to the domain E \ A.
The 'contraction' M/A is the matroid on ground set E \ A with rank function r' defined by r'(X) = r(X ∪ A) - r(A). The deletion is trivially a matroid, and it is an easy exercise to show that the contraction is
a matroid. Finally, the 'dual' of a matroid M = (E,r) is the matroid M* = (E,r') with rank function defined by r'(X) = |X| - r(E) + r(E \ X). It is also easy to show that M* is a matroid, and to
prove the following:

Lemma: For all A ⊆ E we have (M / A)* = M* \ D.

That is, contraction and deletion are dual operations. These statements all seem simple enough, but I can't find a satisfactory way to set them up and prove them in lean.

A couple of years ago, Bryan Chen formalized a number of results about matroids in lean: see https://github.com/bryangingechen/lean-matroids . He started from a different, equivalent definition of matroids
that does not involve a function, but encoded the above definition towards the end of his file, defining a matroid structure (paraphrased) as follows:

```
structure matroid (E : finset α) :=
(r (X : finset α) (hX : X ⊆ E) :  ℕ )

(R1 {X : finset α} (hX : X ⊆ E) : r X hX ≤ card X)

(R2 {X Y : finset α} (hXY : X ⊆ Y) (hY : Y ⊆ E) :
 r X (subset.trans hXY hY) ≤ r Y hY)

(R3 {X Y : finset α} (hX : X ⊆ E) (hY : Y ⊆ E) :
r (X ∪ Y) (union_subset hX hY) + r (X ∩ Y) (inter_subset hX hY) ≤ r X hX + r Y hY)
```
This definition works. One can go ahead and define deletion, contraction and duality, and prove all of the claims I made above without too much trouble. However, the proofs are long, and the main reason
is the requirement that every evaluation of the rank function at a set X, or invocation of the axioms, must be accompanied by a proof that X ⊆ E. This requires a massive amount of bookkeeping. A typical
proof will contain many rank evaluations on different sets (defined by intersections, unions, differences, etc) often on multiple different matroids with interrelated ground sets. The fact that all rank
evaluations are well-defined is invariably obvious, but keeping track of all the relevant proofs gets very unwieldy. I have persisted with this for 500+ lines, formalizing a modest chunk of the basic theory,
and it is painful. Bryan has told me he had a similar experience.

The solution to this seems to be to use types. Bryan also started to do this in the 'fintype2' branch of his git, but didn't get as far as the rank axioms. The idea is presumably to use the ground set E
as a fintype, and think of the rank function as mapping finset E to ℕ. Here is an attempt.

```
variables (E: Type*) [decidable_eq E] [fintype E]

structure matroid :=
(r : finset E → ℕ)
(R1 : ∀ (X : finset E), r X ≤ card X )
(R2 : ∀ (X Y: finset E), X ⊆ Y → r X ≤ r Y)
(R3 : ∀ (X Y: finset  E), r (X ∪ Y) + r (X ∩ Y) ≤ r X + r Y)

#check finset.subtype.fintype

def submatroid (M : matroid E) (F : finset E) : matroid ( ??? ) :=
{ r := sorry,
R1 := sorry,
R2 := sorry,
R3 := sorry,
}
```

As you can see, I don't see how to proceed from here, even with the most basic definitions. I am hoping there is a sensible way to fill in the ??? and the sorrys so that ```submatroid``` captures the restriction
of r to the subset F, together with the proofs that the three axioms are satisfied. Given that these proofs are all mathematically trivial, I would ideally like a solution
that reflects this, and doesn't heavily use coercions or the like.

However, even if this is possible, I'm a little put off; here there seems to be an artificial distiction made between the 'ground set' E, which is encoded as a fintype, and its subset F, which
is encoded a a set. Ideally, I would like to treat E as a set like any other inside proofs, and likewise to not have to pay due to the artificial distiction between a set F as being both the
'universe' of a submatroid and simply a subset of E. Too much of this will certainly cause problems in proofs later on that involve things like infinite classes of matroids on overlapping ground sets
with many different rank functions.

I don't know if I'm asking too much, but what I am doing does seem mathematically natural enough that an elegant solution should be possible in lean. This seems like it should be analogous to issues
relating to subobjects in areas like algebra and topology, but from what I can tell, the finiteness causes new issues.

If you're still reading, thank you for getting this far! Please let me know any thoughts you may have.




